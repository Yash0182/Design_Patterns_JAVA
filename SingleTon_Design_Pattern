//Eagerly Instantiation Singleton
class Singleton
{
    static Singleton sing = new Singleton();  
    private Singleton()             //private constructor so, new Instance of this class cannot be made
    {
        
    }
    static Singleton getInstance()        
    {
        return sing;
    }
    
}
public class Design
{
    public static void main(String args[])
    {
        Singleton s = Singleton.getInstance();
        System.out.println(s.getInstance());
    }
}


//Lazy Instantiation Singleton
class Singleton
{
    static Singleton sing; 
    private Singleton()             //private constructor so, new Instance of this class cannot be made
    {
        
    }
    static Singleton getInstance()        
    {
        if(sing==null)
        {
          sing= new Singleton();   //But this is not thread safe, as multiple threads may read sing's value at the same time and can create two objects
        }
        return sing;
    }
    
}
public class Design
{
    public static void main(String args[])
    {
        Singleton s = Singleton.getInstance();
        System.out.println(s.getInstance());
    }
}


//For Thread Safe USe synchronized keyword
class Singleton
{
    static Singleton sing; 
    private Singleton()             //private constructor so, new Instance of this class cannot be made
    {
        System.out.println("Instance Created");
    }
    static synchronized Singleton getInstance()        
    {
        if(sing==null)
        {
          sing= new Singleton();   
        }
        return sing;
    }
    
}
public class Design
{
    public static void main(String args[])
    {
              
        Thread t = new Thread(new Runnable(){
        public void run()
        {
          Singleton s = Singleton.getInstance();
        }
        });
        Thread t1 = new Thread(new Runnable(){
        public void run()
        {
          Singleton s = Singleton.getInstance();
        }
        });
         t.start();
         t1.start();
    }
}
